// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fakes

import (
	"github.com/willsather/pnpm-buildpack/pnpm-install"
	"sync"
)

// Ensure, that DependencyServiceMock does implement pnpminstall.DependencyService.
// If this is not the case, regenerate this file with moq.
var _ pnpminstall.DependencyService = &DependencyServiceMock{}

// DependencyServiceMock is a mock implementation of pnpminstall.DependencyService.
//
//	func TestSomethingThatUsesDependencyService(t *testing.T) {
//
//		// make and configure a mocked pnpminstall.DependencyService
//		mockedDependencyService := &DependencyServiceMock{
//			InstallFunc: func(path string, launch bool) error {
//				panic("mock out the Install method")
//			},
//		}
//
//		// use mockedDependencyService in code that requires pnpminstall.DependencyService
//		// and then make assertions.
//
//	}
type DependencyServiceMock struct {
	// InstallFunc mocks the Install method.
	InstallFunc func(path string, launch bool) error

	// calls tracks calls to the methods.
	calls struct {
		// Install holds details about calls to the Install method.
		Install []struct {
			// Path is the path argument value.
			Path string
			// Launch is the launch argument value.
			Launch bool
		}
	}
	lockInstall sync.RWMutex
}

// Install calls InstallFunc.
func (mock *DependencyServiceMock) Install(path string, launch bool) error {
	if mock.InstallFunc == nil {
		panic("DependencyServiceMock.InstallFunc: method is nil but DependencyService.Install was just called")
	}
	callInfo := struct {
		Path   string
		Launch bool
	}{
		Path:   path,
		Launch: launch,
	}
	mock.lockInstall.Lock()
	mock.calls.Install = append(mock.calls.Install, callInfo)
	mock.lockInstall.Unlock()
	return mock.InstallFunc(path, launch)
}

// InstallCalls gets all the calls that were made to Install.
// Check the length with:
//
//	len(mockedDependencyService.InstallCalls())
func (mock *DependencyServiceMock) InstallCalls() []struct {
	Path   string
	Launch bool
} {
	var calls []struct {
		Path   string
		Launch bool
	}
	mock.lockInstall.RLock()
	calls = mock.calls.Install
	mock.lockInstall.RUnlock()
	return calls
}
