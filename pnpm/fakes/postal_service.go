// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fakes

import (
	"github.com/paketo-buildpacks/packit/v2/postal"
	"github.com/willsather/pnpm-buildpack/pnpm"
	"sync"
)

// Ensure, that PostalServiceMock does implement pnpm.PostalService.
// If this is not the case, regenerate this file with moq.
var _ pnpm.PostalService = &PostalServiceMock{}

// PostalServiceMock is a mock implementation of pnpm.PostalService.
//
//	func TestSomethingThatUsesPostalService(t *testing.T) {
//
//		// make and configure a mocked pnpm.PostalService
//		mockedPostalService := &PostalServiceMock{
//			DeliverFunc: func(dependency postal.Dependency, cnbPath string, layerPath string, platformPath string) error {
//				panic("mock out the Deliver method")
//			},
//			ResolveFunc: func(path string, id string, version string, stack string) (postal.Dependency, error) {
//				panic("mock out the Resolve method")
//			},
//		}
//
//		// use mockedPostalService in code that requires pnpm.PostalService
//		// and then make assertions.
//
//	}
type PostalServiceMock struct {
	// DeliverFunc mocks the Deliver method.
	DeliverFunc func(dependency postal.Dependency, cnbPath string, layerPath string, platformPath string) error

	// ResolveFunc mocks the Resolve method.
	ResolveFunc func(path string, id string, version string, stack string) (postal.Dependency, error)

	// calls tracks calls to the methods.
	calls struct {
		// Deliver holds details about calls to the Deliver method.
		Deliver []struct {
			// Dependency is the dependency argument value.
			Dependency postal.Dependency
			// CnbPath is the cnbPath argument value.
			CnbPath string
			// LayerPath is the layerPath argument value.
			LayerPath string
			// PlatformPath is the platformPath argument value.
			PlatformPath string
		}
		// Resolve holds details about calls to the Resolve method.
		Resolve []struct {
			// Path is the path argument value.
			Path string
			// ID is the id argument value.
			ID string
			// Version is the version argument value.
			Version string
			// Stack is the stack argument value.
			Stack string
		}
	}
	lockDeliver sync.RWMutex
	lockResolve sync.RWMutex
}

// Deliver calls DeliverFunc.
func (mock *PostalServiceMock) Deliver(dependency postal.Dependency, cnbPath string, layerPath string, platformPath string) error {
	if mock.DeliverFunc == nil {
		panic("PostalServiceMock.DeliverFunc: method is nil but PostalService.Deliver was just called")
	}
	callInfo := struct {
		Dependency   postal.Dependency
		CnbPath      string
		LayerPath    string
		PlatformPath string
	}{
		Dependency:   dependency,
		CnbPath:      cnbPath,
		LayerPath:    layerPath,
		PlatformPath: platformPath,
	}
	mock.lockDeliver.Lock()
	mock.calls.Deliver = append(mock.calls.Deliver, callInfo)
	mock.lockDeliver.Unlock()
	return mock.DeliverFunc(dependency, cnbPath, layerPath, platformPath)
}

// DeliverCalls gets all the calls that were made to Deliver.
// Check the length with:
//
//	len(mockedPostalService.DeliverCalls())
func (mock *PostalServiceMock) DeliverCalls() []struct {
	Dependency   postal.Dependency
	CnbPath      string
	LayerPath    string
	PlatformPath string
} {
	var calls []struct {
		Dependency   postal.Dependency
		CnbPath      string
		LayerPath    string
		PlatformPath string
	}
	mock.lockDeliver.RLock()
	calls = mock.calls.Deliver
	mock.lockDeliver.RUnlock()
	return calls
}

// Resolve calls ResolveFunc.
func (mock *PostalServiceMock) Resolve(path string, id string, version string, stack string) (postal.Dependency, error) {
	if mock.ResolveFunc == nil {
		panic("PostalServiceMock.ResolveFunc: method is nil but PostalService.Resolve was just called")
	}
	callInfo := struct {
		Path    string
		ID      string
		Version string
		Stack   string
	}{
		Path:    path,
		ID:      id,
		Version: version,
		Stack:   stack,
	}
	mock.lockResolve.Lock()
	mock.calls.Resolve = append(mock.calls.Resolve, callInfo)
	mock.lockResolve.Unlock()
	return mock.ResolveFunc(path, id, version, stack)
}

// ResolveCalls gets all the calls that were made to Resolve.
// Check the length with:
//
//	len(mockedPostalService.ResolveCalls())
func (mock *PostalServiceMock) ResolveCalls() []struct {
	Path    string
	ID      string
	Version string
	Stack   string
} {
	var calls []struct {
		Path    string
		ID      string
		Version string
		Stack   string
	}
	mock.lockResolve.RLock()
	calls = mock.calls.Resolve
	mock.lockResolve.RUnlock()
	return calls
}
